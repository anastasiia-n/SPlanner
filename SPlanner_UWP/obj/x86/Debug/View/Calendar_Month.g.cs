#pragma checksum "D:\IPB\Visual Studio 2015\Projects\SPlanner\SPlanner_UWP\View\Calendar_Month.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "92132582C39F2853E303905E2E3C7220"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPlanner_UWP
{
    partial class Calendar_Month : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Panel_Background(global::Windows.UI.Xaml.Controls.Panel obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Shapes_Shape_Fill(global::Windows.UI.Xaml.Shapes.Shape obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Fill = value;
            }
        };

        private class Calendar_Month_obj12_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICalendar_Month_Bindings
        {
            private global::SPlanner.BL.Class dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj12;

            public Calendar_Month_obj12_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 12:
                        this.obj12 = new global::System.WeakReference((global::Windows.UI.Xaml.Shapes.Rectangle)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::SPlanner.BL.Class data = args.NewValue as global::SPlanner.BL.Class;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::SPlanner.BL.Class was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::SPlanner.BL.Class);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Shapes.Rectangle)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SPlanner.BL.Class) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
            }

            // ICalendar_Month_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            // Calendar_Month_obj12_Bindings

            public void SetDataRoot(global::SPlanner.BL.Class newDataRoot)
            {
                this.dataRoot = newDataRoot;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SPlanner.BL.Class obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_id(obj.id, phase);
                    }
                }
            }
            private void Update_id(global::System.Int64 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill(this.obj12.Target as global::Windows.UI.Xaml.Shapes.Rectangle, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("classToColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
        }

        private class Calendar_Month_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICalendar_Month_Bindings
        {
            private global::SPlanner_UWP.ViewModel.Day_Info dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Controls.ItemsControl obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.Border obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;

            private Calendar_Month_obj10_BindingsTracking bindingsTracking;

            public Calendar_Month_obj10_Bindings()
            {
                this.bindingsTracking = new Calendar_Month_obj10_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10:
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.ItemsControl)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::SPlanner_UWP.ViewModel.Day_Info data = args.NewValue as global::SPlanner_UWP.ViewModel.Day_Info;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::SPlanner_UWP.ViewModel.Day_Info was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::SPlanner_UWP.ViewModel.Day_Info);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SPlanner_UWP.ViewModel.Day_Info) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ICalendar_Month_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Calendar_Month_obj10_Bindings

            public void SetDataRoot(global::SPlanner_UWP.ViewModel.Day_Info newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SPlanner_UWP.ViewModel.Day_Info obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_date(obj.date, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Classes(obj.Classes, phase);
                        this.Update_isActualMonth(obj.isActualMonth, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Tasks(obj.Tasks, phase);
                    }
                }
            }
            private void Update_date(global::System.DateTime obj, int phase)
            {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this.Update_date_Day(obj.Day, phase);
            }
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj10.Target as global::Windows.UI.Xaml.Controls.Grid, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("dayBackgroundConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_Classes(global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Class> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj11, obj, null);
                }
            }
            private void Update_date_Day(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj.ToString(), null);
                }
            }
            private void Update_isActualMonth(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj13, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("dayColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_Tasks(global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Tasks(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Tasks_Count(obj.Count, phase);
                    }
                }
            }
            private void Update_Tasks_Count(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj.ToString(), null);
                }
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }

            private class Calendar_Month_obj10_BindingsTracking
            {
                global::System.WeakReference<Calendar_Month_obj10_Bindings> WeakRefToBindingObj; 

                public Calendar_Month_obj10_BindingsTracking(Calendar_Month_obj10_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Calendar_Month_obj10_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Tasks(null);
                }

                public void PropertyChanged_Tasks(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Calendar_Month_obj10_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Tasks_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Tasks_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Tasks(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Calendar_Month_obj10_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task>;
                if (obj != null)
                {
                        bindings.Update_Tasks_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task> cache_Tasks = null;
                public void UpdateChildListeners_Tasks(global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner.BL.Task> obj)
                {
                    if (obj != cache_Tasks)
                    {
                        if (cache_Tasks != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Tasks).PropertyChanged -= PropertyChanged_Tasks;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Tasks).CollectionChanged -= CollectionChanged_Tasks;
                            cache_Tasks = null;
                        }
                        if (obj != null)
                        {
                            cache_Tasks = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Tasks;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Tasks;
                        }
                    }
                }
            }
        }

        private class Calendar_Month_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICalendar_Month_Bindings
        {
            private global::SPlanner_UWP.Calendar_Month dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Button obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Controls.Button obj5;
            private global::Windows.UI.Xaml.Controls.ItemsControl obj7;
            private global::Windows.UI.Xaml.Controls.GridView obj9;

            private Calendar_Month_obj1_BindingsTracking bindingsTracking;

            public Calendar_Month_obj1_Bindings()
            {
                this.bindingsTracking = new Calendar_Month_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.ItemsControl)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        (this.obj9).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.MonthVM.SelectedDay = (global::SPlanner_UWP.ViewModel.Day_Info)this.LookupConverter("noopConverter").ConvertBack((this.obj9).SelectedItem, typeof(global::SPlanner_UWP.ViewModel.Day_Info), null, null);
                                }
                            });
                        break;
                    default:
                        break;
                }
            }

            // ICalendar_Month_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Calendar_Month_obj1_Bindings

            public void SetDataRoot(global::SPlanner_UWP.Calendar_Month newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SPlanner_UWP.Calendar_Month obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MonthVM(obj.MonthVM, phase);
                    }
                }
            }
            private void Update_MonthVM(global::SPlanner_UWP.ViewModel.MonthViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_MonthVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MonthVM_SelectedDate(obj.SelectedDate, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_MonthVM_daysOfWeek(obj.daysOfWeek, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MonthVM_SelectedDay(obj.SelectedDay, phase);
                        this.Update_MonthVM_Day_Month_InfoCollection(obj.Day_Month_InfoCollection, phase);
                    }
                }
            }
            private void Update_MonthVM_SelectedDate(global::System.DateTime obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj3, (global::System.Object)this.LookupConverter("monthPrevConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, (global::System.String)this.LookupConverter("dateHeaderConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj5, (global::System.Object)this.LookupConverter("monthNextConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_MonthVM_daysOfWeek(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                }
            }
            private void Update_MonthVM_SelectedDay(global::SPlanner_UWP.ViewModel.Day_Info obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj9, (global::System.Object)this.LookupConverter("noopConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_MonthVM_Day_Month_InfoCollection(global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner_UWP.ViewModel.Day_Info> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj9, obj, null);
                }
            }

            private class Calendar_Month_obj1_BindingsTracking
            {
                global::System.WeakReference<Calendar_Month_obj1_Bindings> WeakRefToBindingObj; 

                public Calendar_Month_obj1_BindingsTracking(Calendar_Month_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Calendar_Month_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_MonthVM(null);
                }

                public void PropertyChanged_MonthVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Calendar_Month_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::SPlanner_UWP.ViewModel.MonthViewModel obj = sender as global::SPlanner_UWP.ViewModel.MonthViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_MonthVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                    bindings.Update_MonthVM_SelectedDay(obj.SelectedDay, DATA_CHANGED);
                                    bindings.Update_MonthVM_Day_Month_InfoCollection(obj.Day_Month_InfoCollection, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MonthVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDay":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MonthVM_SelectedDay(obj.SelectedDay, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Day_Month_InfoCollection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MonthVM_Day_Month_InfoCollection(obj.Day_Month_InfoCollection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::SPlanner_UWP.ViewModel.MonthViewModel cache_MonthVM = null;
                public void UpdateChildListeners_MonthVM(global::SPlanner_UWP.ViewModel.MonthViewModel obj)
                {
                    if (obj != cache_MonthVM)
                    {
                        if (cache_MonthVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_MonthVM).PropertyChanged -= PropertyChanged_MonthVM;
                            cache_MonthVM = null;
                        }
                        if (obj != null)
                        {
                            cache_MonthVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_MonthVM;
                        }
                    }
                }
                public void PropertyChanged_MonthVM_Day_Month_InfoCollection(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Calendar_Month_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner_UWP.ViewModel.Day_Info> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner_UWP.ViewModel.Day_Info>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_MonthVM_Day_Month_InfoCollection(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Calendar_Month_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner_UWP.ViewModel.Day_Info> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SPlanner_UWP.ViewModel.Day_Info>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.mainCalendarGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3:
                {
                    global::Windows.UI.Xaml.Controls.Button element3 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 111 "..\..\..\View\Calendar_Month.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element3).Click += this.Button_Prev_Click;
                    #line default
                }
                break;
            case 5:
                {
                    global::Windows.UI.Xaml.Controls.Button element5 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 117 "..\..\..\View\Calendar_Month.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element5).Click += this.Button_Next_Click;
                    #line default
                }
                break;
            case 6:
                {
                    this.DayFrame = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            case 7:
                {
                    this.DaysOfWeekGridView = (global::Windows.UI.Xaml.Controls.ItemsControl)(target);
                }
                break;
            case 8:
                {
                    this.calendarGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 9:
                {
                    this.CalendarGridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    #line 63 "..\..\..\View\Calendar_Month.xaml"
                    ((global::Windows.UI.Xaml.Controls.GridView)this.CalendarGridView).ItemClick += this.CalendarGridView_ItemClick;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Calendar_Month_obj1_Bindings bindings = new Calendar_Month_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 10:
                {
                    global::Windows.UI.Xaml.Controls.Grid element10 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    Calendar_Month_obj10_Bindings bindings = new Calendar_Month_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::SPlanner_UWP.ViewModel.Day_Info) element10.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                }
                break;
            case 12:
                {
                    global::Windows.UI.Xaml.Shapes.Rectangle element12 = (global::Windows.UI.Xaml.Shapes.Rectangle)target;
                    Calendar_Month_obj12_Bindings bindings = new Calendar_Month_obj12_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::SPlanner.BL.Class) element12.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element12.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element12, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

